git aDownload and use github in Visual Studio Code

Setting up Github in Visual Studio Code
   1. Download git from https://git-scm.com/download/win
   2. Click Install git
   3. Select Components Window
      # (Optional) Uncheck Windows Explorer Integration
      # Click Next
   4. Pick editor for Git File Window
      # (Optional) Visual Studio Code as Git editor or use Notepad++ if installed
   5. Git Formatting Window
      # Checkout as-in, commit Unix-style line endings
      # Use Windows' default console window
      # Enable file system cachine
      # Enable Git Credential Manager
      Note: This should add the git binary to system environment path. 
      If it doesn't follow then follow the next instructions.
      # Add Git to environment path
      # Finish installing Git
   6. Download Visual Studio Code for system from https://code.visualstudio.com/download

Ref: https://blogs.msdn.microsoft.com/nicktrog/2016/02/11/configuring-visual-studio-code-for-php-development/

Setting Git as an Environment Variable
   1. Search Environment Variables
      # Advanced Tab
      # Environment Variables
      # System Variables > Edit Path
      # New with Path being C:\Program Files\Git\bin or where ever the Git\bin folder is
      # Click Okay

Syncing Visual Studio Code with Github.com account
   1. Download GitHub extension
   2. Download GitHub Pull Requests extension
   3. Open terminal (Shortcut Ctrl + `)
      Terminal: git config --global user.name {{ USERNAME }}
	   Terminal: git config --global user.email {{ EMAIL }}
	4. Click Github Pull Request extension on the side window
   5. Click Sign In and a window will pop up asking you to sign into Github 
   and to add an OAuth token.
   * You may have to do a pull or push to a repository for the user dialog 
   window shows up asking you to sign into github.com

Disable Diagnostics Crash Reporting
   1. File > Preferences > Settings
   2. Search Telemetry
   3. Uncheck both boxes
   4. Restart VSCode

Enable Bash Terminal
   1. Open search bar with Ctrl + Shift + p
   2. In the search bar type >Shell
   3. Select "Terminal Select Default Shell"
   4. Select "Git Bash"

Create .bashrc
   1. Open terminal (Shortcut Ctrl + `)
   2. Navigate to your user home directory
   3. Type "copy > ~/.bashrc"
       # The terminal will say "Command not found" but the .bashrc file will be created

Common .bashrc Alias
   - Alias vue command and enable Vue Create
      1. Open .bashrc
      2. Type into the .bashrc file
         # alias vue='winpty vue.cmd'
      3. Save .bashrc file
      4. Restart VSCode

Ignore directory changes in VSCode
   * Useful if a directory is changed a lot, such as, node_modules
   1. In the root of your project, same as the .git directory, create a text file called .gitignore
   2. The file itself should contain directories or files you wish to ignore in any sub-directories. If you need to fine-tune the 
      ignore, follow the PATTERN FORMAT at https://git-scm.com/docs/gitignore
      Example: node_modules/ 
   * The files and directories will still be tracked in the Explorer window if they were created before the .gitignore file was 
     created.
   4. Go to the file in VSCode Explorer and you should see the .gitignore.txt. Remove the .txt extension. .gitignore is a special
      extension that github uses.
   5. Close VSCode and launch it again to make sure the .gitignore configurations are loaded 
   6. Find a directory with a lot of packages and run npm install to test that the .gitignore file works

Initial commit from local repository to remote (without a pre-existing remote repository)
Note: This uses github's create repository API and allows a repository to be 
      initialized from the commend-line. You will need a http command-line tool like cURL
      or wget
Note: If your Windows 10 build is 17063 then curl is installed by default
   * Use of the API without username and password are slowly being deprecated and will be entirely
      unusable by Sept 2020, please use the next instruction set
   1. Open terminal (Shortcut Ctrl + `)
   *  This uses the cURL http command-line tool
      Terminal: curl -u '{{ USERNAME }}:{{ PASSWORD }}' https://api.github.com/user/repos -d '{"name":"{{ repository Name }}","description":"{{ repository description }}"}'
   *  To add additional parameters to your repo initialization add them to the JSON at the end. The only key-value that is required is:
      "name":"Repository Name". Avoid spaces in the repository.
   *  Read the ref at the end to learn about how to use the API tool. Warning: The 
      instruction on how to use the API can change at any time without warning so be
      aware that something that works one day might no longer work another day
   2. Create folder on your system to act as the new local repository on your system
   3. Move into the directory where your local repository will live
      Termianl: cd /Path/To/Repository
   4. Link the local repository to the remote, do an initial commit
      Terminal: git init
      Terminal: git add .
	   Terminal: git commit -m "Initial commit"
	   Terminal: git remote add origin https://github.com/USERNAME/PATH_TO_NEW_REPOSITORY.git
	   Terminal: git push -u origin master

Initial commit from local repository to remote (without a pre-existing remote repository) using Authorization Code
Note: This uses github's create repository API and allows a repository to be 
      initialized from the commend-line. You will need a http command-line tool like cURL
      or wget
Note: If your Windows 10 build is 17063 then curl is installed by default
   1. Log on to your account in github.com
   2. Go to Developer Settings in your account
   3. Click Personal Access Tokens
   4. Click Generate New Token
   5. In the note put something like token for Github API access
   6. Give it the (parent) `repo` and `delete_repo` permission
   *  (Optional) Give the token all permissions
   7. Click Generate Token
   8. You will be redirected to your personal access tokens page with your new token on top
   9. Go to VSCode
  10. Open terminal (Shortcut Ctrl + `)
   *  This uses the cURL http command-line tool
      Terminal: curl -u '{{ USERNAME }}:{{ Token }}' https://api.github.com/user/repos -d '{"name":"{{ repository Name }}","description":"{{ repository description }}"}'
   *  To add additional parameters to your repo initialization add them to the JSON at the end. The only key-value that is required is:
      "name":"Repository Name". Avoid spaces in the repository.
   *  Read the ref at the end to learn about how to use the API tool. Warning: The 
      instruction on how to use the API can change at any time without warning so be
      aware that something that works one day might no longer work another day

Ref: https://developer.github.com/v3/repos/#create

Initial commit from local repository to remote on github (with existing remote repository)
   1. Create repository on github
   2. Create folder on your system to act as the new local repository on your system
   3. Move into the directory where your local repository will live
      Termianl: cd /Path/To/Repository
   4. Link the local repository to the remote, do an initial commit
      Terminal: git init
	   Terminal: git remote add origin https://github.com/USERNAME/PATH_TO_NEW_REPOSITORY.git
	   Terminal: git pull --rebase origin master
      Terminal: git add .
      Terminal: git commit -m "Initial commit"
      Terminal: git branch --set-upstream-to=origin/master
      Terminal: git push
	  
Commit from local repository to remote
Note: Complete the instruction for one of the "Initial commit from local repository to remote"
      above before doing this
   1. Navigate to repository with a .git already in it. If it does not exists use the previous instructions
   2. Open terminal (Shortcut Ctrl + `)
      Terminal: git add .
	   Terminal: git commit -m "Initial commit"
	   Terminal: git push

Creating new local repository from existing remote repository
   1. Make sure you are in the directory you want the local copy of your repository to live in
   2. Open terminal (Shortcut Ctrl + `)
      Terminal: git init
      Terminal: git remote add origin https://github.com/USERNAME/PATH_TO_EXISTING_REPOSITORY.git
      Terminal: git clone https://github.com/USERNAME/PATH_TO_EXISTING_REPOSITORY.git
   #  The clone command will automatically track the repository

Creating new local repository from existing organization repository
   Note: The same instructions as above but the organization name replaces the USERNAME
	  
Loading repository in Visual Studio Code Source Control that doesn't show up
   1. Source Control Extension
   2. Open folder with .git in it that was already linked to a repository

Switching Repositories that are loaded into Source Control
   1. File > Close Folder
   2. File > Open Folder (This should have a .git that is linked to a remote repository)

Commit using the Source Control
   1. Type a commit message
   2. Open the three dot menu
   3. Select: Stage All Chnages
   4. Select: Commit Staged
   5. Select: Push or Push to if you have a specific branch you need to push to

Setting up Extension Recommendations Per project
   1. Open a Workspace or Workspace folder
   2. Open the Extensions from the left side bar
   3. Click the three dots and select Show Recommendation Extensions
   4. Click the pencil icon next to the Workspace Recommendations
   5. A file called extensionss.json will open up
   #  As an array of strings, type the extension reference id seen on the extension marketplace 
     next to the extension into the extensions.json file

Cloning Master Branch to Another Branch
   1. Press Ctrl + Shift + P
   2. Type and select Create Branch From
   3. Give a new name from the branch and hit Enter
   4. The new branch will be created and you will automatically be switched to it
   #  To confirm you are in the correct working branch look in the lower left corner

Switching Branches
   1. Press Ctrl + Shift + P
   2. Type and select Checkout to
   3. Select the branch and hit Enter and you will be switched to it

Alternative: Switching Branches
   1. In the lower left corner select the branch you want to switch to

Pushing to New Branch
   1. In the new branch from the previous instructions, make a small change and push
   2. If this is the first push from the new branch to git repository you will get a 
      warning there is no upstream branch then ask if you want to create one. Click yes

Delete Local Branch
   1. Press Ctrl + Shift + P
   2. Type and select Delete Branch
   3. Select the branch and hit Enter and the branch will be deleted
   #  You cannot delete the branch you are working on

Delete Remote Branch
   1. Open terminal (Shortcut Ctrl + `)
      Terminal: git push https://github.com/USERNAME/PATH_TO_EXISTING_REPOSITORY.git --delete {{ branch name }}

Delete Remote Branch from Github
   1. Go to github.com and the repository
   2. Click branch
   3. On the right there should be a delete button for each branch except the master

Cloning from Branch other than Master
   # When cloning a different branch of the repository it downloads the entire repository
     then switches branches. There is nothing special about the --branch flag to the clone
     command. Manually switch by using the Ctrl + Shift + P or from the lower left branch
     list.

Change commit message length in VSCode Github Pull Request Extension
   1. File > Preferences > Settings (Shortcut Ctrl + ,)
   2. Type into the search bar: length
   3. Under the Extensions drop down select Git
   4. Change the value of Git: Input Validation Length
   5. Change the value of Git: Input Validation Subject Length
   6. Close settings and close Visual Studio Code   


* merge & Rebase
